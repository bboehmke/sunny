package net2

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestResponseValue_Bytes(t *testing.T) {
	ass := assert.New(t)

	value := ResponseValue{
		Class:     0x12,
		Code:      0x1234,
		Type:      0x12,
		Timestamp: 0x12345678,
	}
	ass.Equal([]byte{
		0x12,
		0x34, 0x12,
		0x12,
		0x78, 0x56, 0x34, 0x12,
	}, value.Bytes(0x00))

	value = ResponseValue{
		Class:     0x12,
		Code:      0x1234,
		Type:      0x10,
		Timestamp: 0x12345678,

		Values: []interface{}{
			"aaa",
		},
	}
	ass.Equal([]byte{
		0x12,
		0x34, 0x12,
		0x10,
		0x78, 0x56, 0x34, 0x12,

		0x61, 0x61, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}, value.Bytes(0x00))

	value = ResponseValue{
		Class:     0x12,
		Code:      0x1234,
		Type:      0x08,
		Timestamp: 0x12345678,

		Values: []interface{}{
			uint32(0x123456),
			uint8(0x12),
		},
	}
	ass.Equal([]byte{
		0x12,
		0x34, 0x12,
		0x08,
		0x78, 0x56, 0x34, 0x12,

		0x56, 0x34, 0x12, 0x01,
		0xfe, 0xff, 0xff, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
	}, value.Bytes(0x00))

	value = ResponseValue{
		Class:     0x12,
		Code:      0x1234,
		Type:      0x12,
		Timestamp: 0x12345678,

		Values: []interface{}{
			uint64(0x1234567812345678),
		},
	}
	ass.Equal([]byte{
		0x12,
		0x34, 0x12,
		0x12,
		0x78, 0x56, 0x34, 0x12,

		0x78, 0x56, 0x34, 0x12, 0x78, 0x56, 0x34, 0x12,
	}, value.Bytes(0x5400))

	value = ResponseValue{
		Class:     0x12,
		Code:      0x1234,
		Type:      0x00,
		Timestamp: 0x12345678,

		Values: []interface{}{
			uint32(0x12345678),
			uint8(0x12),
		},
	}
	ass.Equal([]byte{
		0x12,
		0x34, 0x12,
		0x00,
		0x78, 0x56, 0x34, 0x12,

		0x78, 0x56, 0x34, 0x12,
		0xff, 0xff, 0xff, 0xff,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
	}, value.Bytes(0x00))

	value = ResponseValue{
		Class:     0x12,
		Code:      0x1234,
		Type:      0x40,
		Timestamp: 0x12345678,

		Values: []interface{}{
			int32(-0x12345678),
			uint8(0x12),
		},
	}
	ass.Equal([]byte{
		0x12,
		0x34, 0x12,
		0x40,
		0x78, 0x56, 0x34, 0x12,

		0x88, 0xa9, 0xcb, 0xed,
		0x00, 0x00, 0x00, 0x80,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
	}, value.Bytes(0x00))
}

func TestResponseValue_Read(t *testing.T) {
	ass := assert.New(t)

	value := new(ResponseValue)

	n, err := value.Read([]byte{0x12, 0x34}, 0x00)
	ass.EqualError(err, "invalid ResponseValue - length 2")
	ass.Equal(0, n)

	n, err = value.Read([]byte{
		0x12,
		0x34, 0x12,
		0x12,
		0x78, 0x56, 0x34, 0x12,
	}, 0x00)
	ass.NoError(err)
	ass.Equal(8, n)
	ass.Equal(uint8(0x12), value.Class)
	ass.Equal(uint16(0x1234), value.Code)
	ass.Equal(uint8(0x12), value.Type)
	ass.Equal(uint32(0x12345678), value.Timestamp)

	n, err = value.Read([]byte{
		0x12,
		0x34, 0x12,
		0x10,
		0x78, 0x56, 0x34, 0x12,

		0x61, 0x61, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}, 0x00)
	ass.NoError(err)
	ass.Equal(40, n)
	ass.Equal(uint8(0x12), value.Class)
	ass.Equal(uint16(0x1234), value.Code)
	ass.Equal(uint8(0x10), value.Type)
	ass.Equal(uint32(0x12345678), value.Timestamp)
	ass.Len(value.Values, 1)
	ass.Equal("aaa", value.Values[0].(string))

	n, err = value.Read([]byte{
		0x12,
		0x34, 0x12,
		0x08,
		0x78, 0x56, 0x34, 0x12,

		0x56, 0x34, 0x12, 0x01,
		0xfe, 0xff, 0xff, 0x00,
		0x00, 0x00, 0x00, 0x00,
	}, 0x00)
	ass.NoError(err)
	ass.Equal(40, n)
	ass.Equal(uint8(0x12), value.Class)
	ass.Equal(uint16(0x1234), value.Code)
	ass.Equal(uint8(0x08), value.Type)
	ass.Equal(uint32(0x12345678), value.Timestamp)
	ass.Len(value.Values, 1)
	ass.Equal(uint32(0x123456), value.Values[0])

	n, err = value.Read([]byte{
		0x12,
		0x34, 0x12,
		0x12,
		0x78, 0x56, 0x34, 0x12,

		0x78, 0x56, 0x34, 0x12, 0x78,
	}, 0x5400)
	ass.EqualError(err, "invalid ResponseValue - length 13")
	ass.Equal(8, n)

	n, err = value.Read([]byte{
		0x12,
		0x34, 0x12,
		0x12,
		0x78, 0x56, 0x34, 0x12,

		0x78, 0x56, 0x34, 0x12, 0x78, 0x56, 0x34, 0x12,
	}, 0x5400)
	ass.NoError(err)
	ass.Equal(16, n)
	ass.Equal(uint8(0x12), value.Class)
	ass.Equal(uint16(0x1234), value.Code)
	ass.Equal(uint8(0x12), value.Type)
	ass.Equal(uint32(0x12345678), value.Timestamp)
	ass.Len(value.Values, 1)
	ass.Equal(uint64(0x1234567812345678), value.Values[0])

	n, err = value.Read([]byte{
		0x12,
		0x34, 0x12,
		0x00,
		0x78, 0x56, 0x34, 0x12,

		0x78, 0x56, 0x34, 0x12,
		0xff, 0xff, 0xff, 0xff,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
	}, 0x00)
	ass.NoError(err)
	ass.Equal(28, n)
	ass.Equal(uint8(0x12), value.Class)
	ass.Equal(uint16(0x1234), value.Code)
	ass.Equal(uint8(0x00), value.Type)
	ass.Equal(uint32(0x12345678), value.Timestamp)
	ass.Len(value.Values, 1)
	ass.Equal(uint32(0x12345678), value.Values[0])

	n, err = value.Read([]byte{
		0x12,
		0x34, 0x12,
		0x40,
		0x78, 0x56, 0x34, 0x12,

		0x88, 0xa9, 0xcb, 0xed,
		0x00, 0x00, 0x00, 0x80,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
	}, 0x00)
	ass.NoError(err)
	ass.Equal(28, n)
	ass.Equal(uint8(0x12), value.Class)
	ass.Equal(uint16(0x1234), value.Code)
	ass.Equal(uint8(0x40), value.Type)
	ass.Equal(uint32(0x12345678), value.Timestamp)
	ass.Len(value.Values, 1)
	ass.Equal(int32(-0x12345678), value.Values[0])
}

func TestNewDeviceData(t *testing.T) {
	ass := assert.New(t)

	data := NewDeviceData(0x12)
	ass.Equal(*LocalDeviceId(), data.Source)
	ass.Equal(uint8(0x12), data.Control)

	data2 := NewDeviceData(0x12)
	ass.True(data.PacketID < data2.PacketID)
}

func TestDeviceData_ProtocolID(t *testing.T) {
	ass := assert.New(t)

	ass.Equal(uint16(0x6065), new(DeviceData).ProtocolID())
	ass.Equal(uint16(0x6065), DeviceDataProtocolID)
}

func TestDeviceData_Bytes(t *testing.T) {
	ass := assert.New(t)

	data := DeviceData{
		Control: 0x12,
		Destination: DeviceId{
			SusyID:       0x1234,
			SerialNumber: 0x12345678,
		},
		JobNumber: 0x12,
		Source: DeviceId{
			SusyID:       0x1234,
			SerialNumber: 0x12345678,
		},
		Status:      0x1234,
		PacketCount: 0x2143,
		PacketID:    0x0123,

		Command: 0x12,
		Object:  0x1234,

		Parameters: []uint32{
			0x12345678,
			0x12345678,
		},
	}

	ass.Equal([]byte{
		0x09,       // length
		0x12,       // control
		0x34, 0x12, // DstSusyID
		0x78, 0x56, 0x34, 0x12, // DstSerialNumber
		0x00,       // unknown
		0x12,       // JobNumber
		0x34, 0x12, // SrcSusyID
		0x78, 0x56, 0x34, 0x12, // SrcSerialNumber
		0x00,       // unknown
		0x12,       // JobNumber
		0x34, 0x12, // Status
		0x43, 0x21, // PacketCount
		0x23, 0x81, // PacketID | 0x8000
		0x12,       // Command
		0x02,       // Parameter count
		0x34, 0x12, // Object
		0x78, 0x56, 0x34, 0x12, // parameter 1
		0x78, 0x56, 0x34, 0x12, // parameter 2
	}, data.Bytes())

	data = DeviceData{
		Control: 0x12,
		Destination: DeviceId{
			SusyID:       0x1234,
			SerialNumber: 0x12345678,
		},
		JobNumber: 0x12,
		Source: DeviceId{
			SusyID:       0x1234,
			SerialNumber: 0x12345678,
		},
		Status:      0x1234,
		PacketCount: 0x2143,
		PacketID:    0x0123,

		Command: 0x12,
		Object:  0x1234,

		Parameters: []uint32{
			0x12345678,
		},

		Data: []byte{0x12, 0x34},
	}

	ass.Equal([]byte{
		0x08,       // length
		0x12,       // control
		0x34, 0x12, // DstSusyID
		0x78, 0x56, 0x34, 0x12, // DstSerialNumber
		0x00,       // unknown
		0x12,       // JobNumber
		0x34, 0x12, // SrcSusyID
		0x78, 0x56, 0x34, 0x12, // SrcSerialNumber
		0x00,       // unknown
		0x12,       // JobNumber
		0x34, 0x12, // Status
		0x43, 0x21, // PacketCount
		0x23, 0x81, // PacketID | 0x8000
		0x12,       // Command
		0x01,       // Parameter count
		0x34, 0x12, // Object
		0x78, 0x56, 0x34, 0x12, // parameter 1
		0x12, 0x34,
	}, data.Bytes())
}

func TestDeviceData_Read(t *testing.T) {
	ass := assert.New(t)

	data := new(DeviceData)

	ass.EqualError(data.Read([]byte{0x09, 0x12}),
		"invalid DeviceData - length 2")

	ass.EqualError(data.Read([]byte{
		0x05,       // length (invalid)
		0x12,       // control
		0x34, 0x12, // DstSusyID
		0x78, 0x56, 0x34, 0x12, // DstSerialNumber
		0x00,       // unknown
		0x12,       // JobNumber
		0x34, 0x12, // SrcSusyID
		0x78, 0x56, 0x34, 0x12, // SrcSerialNumber
		0x00,       // unknown
		0x12,       // JobNumber
		0x34, 0x12, // Status
		0x43, 0x21, // PacketCount
		0x23, 0x81, // PacketID | 0x8000
		0x12,       // Command
		0x02,       // Parameter count
		0x34, 0x12, // Object
		0x78, 0x56, 0x34, 0x12, // parameter 1
		0x78, 0x56, 0x34, 0x12, // parameter 2
	}), "invalid sma net2 data size. expected 20 - get 36")

	ass.NoError(data.Read([]byte{
		0x09,       // length (invalid)
		0x12,       // control
		0x34, 0x12, // DstSusyID
		0x78, 0x56, 0x34, 0x12, // DstSerialNumber
		0x00,       // unknown
		0x12,       // JobNumber
		0x34, 0x12, // SrcSusyID
		0x78, 0x56, 0x34, 0x12, // SrcSerialNumber
		0x00,       // unknown
		0x12,       // JobNumber
		0x34, 0x12, // Status
		0x43, 0x21, // PacketCount
		0x23, 0x81, // PacketID | 0x8000
		0x12,       // Command
		0x02,       // Parameter count
		0x34, 0x12, // Object
		0x78, 0x56, 0x34, 0x12, // parameter 1
		0x78, 0x56, 0x34, 0x12, // parameter 2
	}))

	ass.Equal(uint8(0x12), data.Control)
	ass.Equal(uint16(0x1234), data.Destination.SusyID)
	ass.Equal(uint32(0x12345678), data.Destination.SerialNumber)

	ass.Equal(uint8(0x12), data.JobNumber)
	ass.Equal(uint16(0x1234), data.Source.SusyID)
	ass.Equal(uint32(0x12345678), data.Source.SerialNumber)

	ass.Equal(uint16(0x1234), data.Status)
	ass.Equal(uint16(0x2143), data.PacketCount)
	ass.Equal(uint16(0x0123), data.PacketID)
	ass.Equal(uint8(0x12), data.Command)
	ass.Equal(uint16(0x1234), data.Object)

	ass.Equal([]uint32{
		0x12345678,
		0x12345678,
	}, data.Parameters)

	ass.NoError(data.Read([]byte{
		0x0C,       // length
		0x12,       // control
		0x34, 0x12, // DstSusyID
		0x78, 0x56, 0x34, 0x12, // DstSerialNumber
		0x00,       // unknown
		0x12,       // JobNumber
		0x34, 0x12, // SrcSusyID
		0x78, 0x56, 0x34, 0x12, // SrcSerialNumber
		0x00,       // unknown
		0x12,       // JobNumber
		0x34, 0x12, // Status
		0x43, 0x21, // PacketCount
		0x23, 0x81, // PacketID | 0x8000
		0x01,       // Command
		0x02,       // Parameter count
		0x34, 0x12, // Object
		0x78, 0x56, 0x34, 0x12, // parameter 1
		0x78, 0x56, 0x34, 0x12, // parameter 2

		// empty response value
		0x12,
		0x34, 0x12,
		0x12,
		0x78, 0x56, 0x34, 0x12,

		0x00, 0x00, 0x00, 0x00,
	}))

	ass.Equal(uint8(0x12), data.Control)
	ass.Equal(uint16(0x1234), data.Destination.SusyID)
	ass.Equal(uint32(0x12345678), data.Destination.SerialNumber)

	ass.Equal(uint8(0x12), data.JobNumber)
	ass.Equal(uint16(0x1234), data.Source.SusyID)
	ass.Equal(uint32(0x12345678), data.Source.SerialNumber)

	ass.Equal(uint16(0x1234), data.Status)
	ass.Equal(uint16(0x2143), data.PacketCount)
	ass.Equal(uint16(0x0123), data.PacketID)
	ass.Equal(uint8(0x01), data.Command)
	ass.Equal(uint16(0x1234), data.Object)

	ass.Equal([]uint32{
		0x12345678,
		0x12345678,
	}, data.Parameters)

	ass.Len(data.ResponseValues, 1)
	ass.Equal(uint8(0x12), data.ResponseValues[0].Class)
	ass.Equal(uint16(0x1234), data.ResponseValues[0].Code)
	ass.Equal(uint8(0x12), data.ResponseValues[0].Type)
	ass.Equal(uint32(0x12345678), data.ResponseValues[0].Timestamp)
}

func TestDeviceData_AddParameter(t *testing.T) {
	ass := assert.New(t)

	data := new(DeviceData)

	data.AddParameter(0x12345678)
	data.AddParameter(0x87654321)

	ass.Equal([]uint32{
		0x12345678,
		0x87654321,
	}, data.Parameters)
}
